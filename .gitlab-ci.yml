image: ubuntu:22.04

stages:
  - test
  - deploy

before_script:
  - apt update -q && apt install python3 python3-pip sqlite3 docker.io docker-compose -yq
  - ./scripts/install_ubuntu_deps.sh
  - pip3 install -r ./requirements.txt

test:
  stage: test
  script:
    # config cmake project
    - cmake -Bbuild/linux-release -DCMAKE_BUILD_TYPE=Release -DSESE_BUILD_TEST=ON -DSESE_USE_NATIVE_MANAGER=ON -DSESE_DB_USE_MARIADB=ON -DSESE_DB_USE_POSTGRES=ON -DCMAKE_CXX_FLAGS="--coverage -fprofile-update=atomic"
    - cmake --build build/linux-release -- -j 2
    # restore sqlite database
    - mkdir docker/tmp && sqlite3 docker/tmp/db_test.db < docker/sqlite_dump.sql
    # setup services
    - docker-compose -f docker/docker-compose.yml up -d mariadb postgresql && sleep 5
    # run tests
    - ./build/linux-release/test/AllTestsInMain
    # shutdown service
    - docker-compose -f docker/docker-compose.yml down
    # make coverage reposts
    - mkdir -p build/coverage
    - gcovr --config gcovr-cobertura.cfg
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    when: on_success
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/coverage/coverage.xml

pages:
  stage: deploy
  script:
    - apt update -q && apt install doxygen -yq
    - doxygen
    - mv -r build/html public
  artifacts:
    paths:
      - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH