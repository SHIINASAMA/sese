#  Copyright 2024 libsese
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

import argparse
import json
from pathlib import Path


note = """
// Please do not modify this file manually
// This file is generated by Bundler.py

"""


def parse_file(filename: str) -> dict[str, str]:
    with open(filename, "r") as file:
        data = json.load(file)
        return data["binaries"]


def write_windows_rc(binaries: dict[str, str], class_name: str, args) -> None:
    filename = args.base_path + "/" + args.generate_code_path + "/" + class_name
    print(f"Writing {filename}")
    with open(filename + ".rc", "w") as file:
        file.write("#include \"{}.h\"\n".format(class_name))
        for k, v in binaries.items():
            file.write("BIN_{} RCDATA {}\n".format(k, args.base_path + "/" + v))

    with open(filename + ".h", "w") as file:
        file.write(note)
        file.write("#pragma once\n#ifdef RC_INVOKED\n")
        i = 1000
        for k, v in binaries.items():
            file.write("#define BIN_{} {}\n".format(k, i))
            i += 1
        file.write("#endif\n\n")

        file.write("class {} {{\npublic:\nenum class Binaries : int {{\n".format(class_name))
        i = 1000
        for k, v in binaries.items():
            file.write("\t{} = {},\n".format(k, i))
            i += 1
        file.write("};\n};")
        file.flush()

def write_elf_object(binaries: dict[str, str], class_name: str, args) -> None:
    pass

def write_mach_o_object(binaries: dict[str, str], class_name: str, args) -> None:
    pass

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--base_path', type=str, required=True, help="Base path")
    parser.add_argument('--resource_file_path', type=str, required=True, help="Path to the resource file")
    parser.add_argument('--generate_code_path', type=str, required=True, help="Path to generate code")
    parser.add_argument('--method_name', type=str, required=True, help="Method name")
    args = parser.parse_args()

    file_path = Path(args.resource_file_path)
    class_name = file_path.stem
    binaries = parse_file(args.resource_file_path)
    if args.method_name == "rc":
        write_windows_rc(binaries, class_name, args)
    elif args.method_name == "elf":
        write_elf_object(binaries, class_name, args)
    elif args.method_name == "mach-o":
        write_mach_o_object(binaries, class_name, args)
    else:
        raise NotImplementedError


if __name__ == "__main__":
    main()
