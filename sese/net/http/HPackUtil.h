// Copyright 2024 libsese
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @file HPackUtil.h
 * @author kaoru
 * @version 0.2
 * @brief HTTP HPACK Algorithm Class
 * @date September 13, 2023
 */

#pragma once

#include "sese/io/InputStream.h"
#include "sese/io/OutputStream.h"
#include "sese/util/NotInstantiable.h"
#include "sese/net/http/Header.h"
#include "sese/net/http/DynamicTable.h"
#include "sese/net/http/Huffman.h"

namespace sese::net::http {

/// HPACK decompression tool class
class  HPackUtil final : public NotInstantiable {
public:
    using InputStream = io::InputStream;
    using OutputStream = io::OutputStream;

    HPackUtil() = delete;

    /// Attempt to parse HPACK compressed HEADERS from the stream
    /// \param src Stream source
    /// \param content_length Length of content to be parsed
    /// \param table Dynamic table used for parsing
    /// \param header Storage for parsing results
    /// \param is_resp Indicates if this is a response
    /// \param has_pseudo Need to verify pseudo-fields at the beginning
    /// \param limit Dynamic table size limit
    /// \return Returns 0 if parsing is successful, otherwise returns an error code
    static uint32_t decode(
        InputStream *src,
        size_t content_length,
        DynamicTable &table,
        Header &header,
        bool is_resp,
        bool has_pseudo = true,
        uint32_t limit = 8192
    ) noexcept;

    /// Attempt to compress HEADERS in HPACK format
    /// \param dest Destination stream
    /// \param table Dynamic table used for compression
    /// \param once_header Non-indexed fields
    /// \param indexed_header Indexed fields
    /// \return Size of the buffer generated by compression
    static size_t encode(OutputStream *dest, DynamicTable &table, Header &once_header, Header &indexed_header) noexcept;

private:
    static int decodeInteger(uint8_t &buf, InputStream *src, uint32_t &dest, uint8_t n) noexcept;

    static int decodeString(InputStream *src, std::string &dest) noexcept;

    static size_t encodeIndexCase0(OutputStream *dest, size_t index) noexcept;

    static size_t encodeIndexCase1(OutputStream *dest, size_t index) noexcept;

    static size_t encodeIndexCase2(OutputStream *dest, size_t index) noexcept;

    static size_t encodeIndexCase3(OutputStream *dest, size_t index) noexcept;

    static size_t encodeString(OutputStream *dest, const std::string &str) noexcept;

    static std::string buildCookieString(const Cookie::Ptr &cookie) noexcept;

    /// Check for duplicate pseudo-fields and set header values
    /// @see sese::net::http::HttpConverter
    /// @param header Target header
    /// @param key Key
    /// @param value Value
    /// @return Whether setting was successful
    static bool setHeader(Header &header, const std::string &key, const std::string &value) noexcept;

    /// Validate pseudo-fields
    /// @param header Header
    /// @param is_resp Whether it is a response
    /// @return Validation result
    static bool verifyHeader(Header &header, bool is_resp) noexcept;

    static const std::string REQ_PSEUDO_HEADER[4];

    static HuffmanDecoder decoder;
    static HuffmanEncoder encoder;
};
} // namespace sese::net::http