// Copyright 2024 libsese
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * \file SymbolConverter.h
 * \brief Symbol converter utility class
 * \author kaoru
 * \version 0.1
 */

#pragma once

#include <typeinfo>
#include <string>
#include <sese/util/NotInstantiable.h>

namespace sese {

class SymbolConverter final : public NotInstantiable {
public:
    SymbolConverter() = delete;

    /// Parse the symbol literal generated by typeid
    /// @warning Only supports class information
    /// @param type The result of the unix typeid operator
    /// @return The actual symbol literal
    static std::string decodeUnixClassName(const std::type_info *type) noexcept;

    /// Parse the symbol literal generated by typeid
    /// @warning Only supports class information
    /// @param type MSVC typeid operator result
    /// @return The actual symbol literal
    static std::string decodeMSVCClassName(const std::type_info *type) noexcept;
};

} // namespace sese