find_package(OpenSSL REQUIRED)
find_package(SString CONFIG REQUIRED)
find_package(SimpleUuid CONFIG REQUIRED)

add_library(Core SHARED)
add_library(Core-static STATIC)

target_include_directories(
        Core
        PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>
        $<INSTALL_INTERFACE:include>
)
target_include_directories(
        Core-static
        PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_LIST_DIR}/include>
        $<INSTALL_INTERFACE:include>
)

target_sources(Core PRIVATE
        src/record/AbstractAppender.cpp src/record/SimpleFormatter.cpp
        src/record/ConsoleAppender.cpp src/record/Logger.cpp
        src/record/LogHelper.cpp src/record/FileAppender.cpp
        src/record/BlockAppender.cpp

        src/convert/EncodingConverter.cpp src/convert/Base64Converter.cpp
        src/convert/PercentConverter.cpp src/convert/MD5Util.cpp
        src/convert/SHA256Util.cpp src/convert/SHA1Util.cpp
        src/convert/MessageDigest.cpp

        src/thread/Thread.cpp src/thread/ThreadPool.cpp

        src/system/Environment.cpp src/system/LibraryLoader.cpp

        src/net/Address.cpp src/net/IPAddress.cpp
        src/net/IPv4Address.cpp src/net/IPv6Address.cpp
        src/net/AddressPool.cpp
        src/net/http/Header.cpp src/net/http/QueryString.cpp
        src/net/http/HttpUtil.cpp src/net/http/UrlHelper.cpp
        src/net/http/HttpClient.cpp src/net/http/HttpServer.cpp
        src/net/http/Cookie.cpp src/net/http/CookieMap.cpp
        src/net/rpc/Server.cpp src/net/rpc/Client.cpp
        src/net/ws/WebSocketContext.cpp src/net/ws/WebSocketAuthenticator.cpp

        src/config/ConfigUtil.cpp
        src/config/json/JsonTypes.cpp src/config/json/JsonUtil.cpp
        src/config/xml/XmlTypes.cpp src/config/xml/XmlUtil.cpp

        src/text/DateTimeFormatter.cpp src/text/TextReader.cpp
        src/text/AbstractStringBuffer.cpp

        src/util/ArgParser.cpp src/util/UuidBuilder.cpp
        src/util/AbstractByteBuffer.cpp src/util/BufferedStream.cpp
        src/util/BufferedOutputStream.cpp src/util/BufferedInputStream.cpp
        src/util/DateTime.cpp src/util/TimeSpan.cpp
        src/util/StringBuffer.cpp src/util/ByteBuffer.cpp
        src/util/Random.cpp src/util/Util.cpp
        src/util/FileStream.cpp src/util/Test.cpp
        src/util/Timer.cpp src/util/Initializer.cpp
        src/util/MemoryViewer.cpp src/util/ConsoleOutputStream.cpp
        src/util/OutputBufferWrapper.cpp src/util/InputBufferWrapper.cpp

        src/security/SecurityConfig.cpp src/security/SSLContext.cpp
        src/security/SSLContextBuilder.cpp src/security/SecuritySocket.cpp
        src/security/MessageDigest.cpp
        )

set(NATIVE_PATH "src/native/${CMAKE_SYSTEM_NAME}")
target_sources(Core PRIVATE
        ${NATIVE_PATH}/Test.cpp
        ${NATIVE_PATH}/net/Socket.cpp
        ${NATIVE_PATH}/net/TcpServer.cpp
        ${NATIVE_PATH}/net/ReadableServer.cpp
        ${NATIVE_PATH}/security/SecurityTcpServer.cpp
        ${NATIVE_PATH}/config/UniReader.cpp
        ${NATIVE_PATH}/system/SharedMemory.cpp
        )

target_sources(Core-static PRIVATE $<TARGET_OBJECTS:Core>)

if (WIN32)
    set(DLL_INFO_RC ${PROJECT_BINARY_DIR}/WindowsDllInfo.rc)
    configure_file(${PROJECT_SOURCE_DIR}/WindowsDllInfo.rc.in ${DLL_INFO_RC})

    target_sources(Core PRIVATE ${DLL_INFO_RC})
    target_compile_definitions(Core PUBLIC -DWINDOWS_DLL)
    target_compile_definitions(Core PUBLIC -DNEED_DBGHELP)
    target_compile_options(Core PRIVATE "/utf-8")
    target_compile_options(Core PRIVATE "/wd4251")
    target_compile_options(Core PRIVATE "/wd4530")
    target_link_libraries(Core ws2_32)

    target_compile_definitions(Core-static PUBLIC -DNEED_DBGHELP)
    target_compile_options(Core-static PRIVATE "/utf-8")
    target_compile_options(Core-static PRIVATE "/wd4251")
    target_compile_options(Core-static PRIVATE "/wd4530")
    target_link_libraries(Core-static ws2_32)

    message(STATUS "Linked libraries: ws2_32, dbghelp")
endif ()

if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    find_package(Threads REQUIRED)

    target_compile_options(Core PUBLIC "-fPIC")
    target_link_libraries(Core ${CMAKE_THREAD_LIBS_INIT} ${CMAKE_DL_LIBS})
    target_link_libraries(Core-static ${CMAKE_THREAD_LIBS_INIT} ${CMAKE_DL_LIBS})

    message(STATUS "Linked libraries: pthread, dl")
endif ()

set_target_properties(Core PROPERTIES OUTPUT_NAME "sese.core" PREFIX "")
set_target_properties(Core PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)

target_link_libraries(Core SString::SString-static SimpleUuid::uuid-static OpenSSL::Crypto OpenSSL::SSL)
target_link_libraries(Core-static SString::SString-static SimpleUuid::uuid-static OpenSSL::Crypto OpenSSL::SSL)

add_custom_command(
        TARGET
        Core
        POST_BUILD
        COMMAND
        ${CMAKE_COMMAND} -E copy_if_different
        $<TARGET_FILE:Core> ${PROJECT_BINARY_DIR}/gtest
)

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)
configure_package_config_file(
        ${PROJECT_SOURCE_DIR}/cmake/SeseConfig.cmake.in
        ${PROJECT_BINARY_DIR}/SeseConfig.cmake
        INSTALL_DESTINATION lib/cmake/sese.core
)

install(
        TARGETS Core Core-static
        EXPORT SeseTargets
        RUNTIME DESTINATION bin
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        PUBLIC_HEADER DESTINATION include
)

install(
        DIRECTORY "${CMAKE_CURRENT_LIST_DIR}/include/sese"
        DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}"
)

install(
        FILES "${PROJECT_BINARY_DIR}/SeseConfig.cmake"
        DESTINATION lib/cmake/sese.core
)

install(
        EXPORT SeseTargets
        DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/sese.core
        NAMESPACE Sese::
)