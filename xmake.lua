set_xmakever("2.8.5")
set_project("sese-core")
set_version("1.3.2")

add_rules("mode.debug", "mode.release")

add_requires("openssl3 3.0.7", "zlib v1.3")
add_requires("gtest v1.14.0", {optional = true})
add_requires("python 3.x", {system = true})

set_languages("c++20")
set_encodings("utf-8")

add_includedirs("$(projectdir)")

if is_plat("linux") or is_plat("macosx") then 
    add_cxxflags("-fPIC")
end

target("sese-core")
    set_kind("shared")
    add_defines("SESE_REPO_HASH=\"$(shell git --no-pager log -1 --pretty=format:%h)\"")
    add_defines("SESE_REPO_BRANCH=\"$(shell git --no-pager symbolic-ref --short -q HEAD)\"")
    add_packages("openssl3")
    add_packages("zlib")
    if is_mode("debug") then
        set_policy("build.sanitizer.address", true)
    end
    if is_plat("windows") then
        add_defines("WIN32")
        add_packages("advapi32")
        add_packages("crypt32")
        -- add_packages("dbghelp")
        -- add_packages("iphlpapi")
        add_packages("secur32")
        add_packages("ws2_32")
        add_files("sese/native/win/**.cpp")
        add_links("dbghelp", "iphlpapi")
    end
    if is_plat("linux") then
        add_packages("pthread")
	    add_files("sese/native/linux/**.cpp")
	    add_files("sese/native/unix/**.cpp")
    end
    if is_plat("macosx") then
        add_frameworks("CoreFoundation")
        add_frameworks("CoreServices")
        add_frameworks("IOKit")
        add_files("sese/native/darwin/**.cpp")
        add_files("sese/native/unix/**.cpp")
    end
    -- add_files("sese/concurrent/**.cpp")
    add_files("sese/config/**.cpp")
    add_files("sese/convert/**.cpp")
    -- add_files("sese/event/**.cpp")
    add_files("sese/io/**.cpp")
    add_files("sese/net/**.cpp")
    add_files("sese/plugin/**.cpp")
    add_files("sese/record/**.cpp")
    add_files("sese/security/**.cpp")
    add_files("sese/service/**.cpp")
    add_files("sese/system/**.cpp")
    add_files("sese/text/**.cpp")
    add_files("sese/thread/**.cpp")
    add_files("sese/util/**.cpp")
    add_headerfiles("sese/**.h")
    add_rules("utils.symbols.export_all", {export_classes = true})
    on_config(function (target) 
        import("core.base.semver")
        import("core.project.project")
        local version = semver.new(project.version())
        target:add("defines", "SESE_MAJOR_VERSION=\"" .. version:major() .. "\"")
        target:add("defines", "SESE_MINOR_VERSION=\"" .. version:minor() .. "\"")
        target:add("defines", "SESE_PATCH_VERSION=\"" .. version:patch() .. "\"")
    end)

target("plugin")
    set_kind("static")
    add_files("sese/plugin/**.cpp")
    add_headerfiles("sese/**.h")

target("module")
    set_kind("shared")
    set_extension(".m")
    set_prefixname("")
    add_files("gtest/TestPlugin/Module.cpp")
    add_deps("plugin")

target("mem.d")
    set_kind("binary")
    add_files("gtest/TestSharedMemory/Memory.d.cpp")
    add_deps("sese-core")

target("all_test_in_main")
    set_kind("binary")
    add_defines("SESE_BUILD_TEST")
    add_files("gtest/*.cpp")
    add_files("gtest/TestPlugin/TestPlugin.cpp")
    add_files("gtest/TestSharedMemory/TestSharedMemory.cpp")
    add_deps("sese-core")
    add_packages("gtest")
    if is_mode("debug") then
        set_policy("build.sanitizer.address", true)
    end
    on_config(function (target)
        import("core.project.project")
        local projectdir = os.projectdir():gsub("\\", "/")
        local core_targetfile = (os.projectdir() .. "\\" .. project.target("sese-core"):targetfile()):gsub("\\", "/")
        local module_targetfile = (os.projectdir() .. "\\" .. project.target("module"):targetfile()):gsub("\\", "/")
        local mem_d_targetfile = (os.projectdir() .. "\\" .. project.target("mem.d"):targetfile()):gsub("\\", "/")
        target:add("defines", "PROJECT_PATH=\"" .. projectdir .. "\"")
        target:add("defines", "PY_EXECUTABLE=\"python3\"")
        target:add("defines", "PATH_TO_CORE=\"" .. core_targetfile .. "\"")
        target:add("defines", "PATH_TO_MODULE=\"" .. module_targetfile .. "\"")
        target:add("defines", "PATH_TO_MEM_D=\"" .. mem_d_targetfile .."\"")
    end)

target("test")
    set_kind("phony")
    add_options("test")
    add_deps("module")
    add_deps("mem.d")
    add_deps("all_test_in_main")